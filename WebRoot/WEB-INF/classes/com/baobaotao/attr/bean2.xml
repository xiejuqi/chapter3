<?xml version="1.0" encoding="UTF-8"?>
<!-- 引用Spring的多个Schema空间的格式定义文件 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:lang="http://www.springframework.org/schema/lang" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:util="http://www.springframework.org/schema/util"	
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx  
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
        http://www.springframework.org/schema/lang
		http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-3.0.xsd" >
	 
	<!-- 1.在子容器中定义的Bean，该Bean和父容器中的car Bean具有相同的ID -->
	<bean id="car" class="com.baobaotao.attr.Car">
		<property name="maxSpeed">
			<value>200</value>
		</property>
		<property name="brand">
			<value><![CDATA[吉利CT5]]></value>
		</property>
		<property name="price">
			<value>2000.00</value>
		</property>
	</bean>
	
	<bean id="boss" class="com.baobaotao.attr.Boss">
		<property name="car">
			<!-- 引用父容器中的car，而非1处定义的Bean，如果采用	<ref bean="car"/> 将引用本容器中的1处的car -->
			<ref parent="car"/>
		</property>
	</bean>
	
	<!-- 内部Bean -->
	<bean id="boss1" class="com.baobaotao.attr.Boss">
		<property name="car">
			<bean  class="com.baobaotao.attr.Car">
		<property name="maxSpeed">
			<value>200</value>
		</property>
		<property name="brand">
			<value><![CDATA[吉利CT5]]></value>
		</property>
		<property name="price">
			<value>2000.00</value>
		</property>
	</bean>
		</property>
	</bean>
	
	<!-- 引用null值 -->
	<bean id="car1" class="com.baobaotao.attr.Car">
		<property name="brand">
			<null></null>
		</property>
	</bean>
	
	<!-- 级联属性 -->
	<bean id="boss2" class="com.baobaotao.attr.Boss">
		<!-- 以圆点(.)的方式定义级联属性 -->
		<property name="car.brand" value="福特野马"></property>
	</bean>
	
	<!-- Set集合属性 -->
	<bean id="boss3" class="com.baobaotao.attr.Boss">
		<property name="favorites">
			<list>
				<value>看报</value>
				<value>赛车</value>
				<value>高尔夫</value>
			</list>
		</property>
		<property name="computers">
			<set>
				<value>ThinkPad T530</value>
				<value>Lenovo Y430</value>
				<value>神舟战神K650</value>
			</set>
		</property>
		
		<!-- map属性 -->
		<property name="jobs">
			<map>
				<entry>
					<key>
						<value>AM</value>
					</key>
					<value>会见客户</value>
				</entry>
				<entry>
					<key>
						<value>PM</value>
					</key>
					<value>公司内部会议</value>
				</entry>
				<entry>
					<key>
						<ref bean="car"/>
					</key>
					<ref bean="car1"/>
				</entry>
			</map>
		</property>
		
		<!-- properties 属性 -->
		<property name="mails">
			<props>
				<prop key="jobMail">john-office@baobaotao.com</prop>
				<prop key="lifeMail">john-life@baobaotao.com</prop>
			</props>
		</property>
		
		<!-- 强类型Map属性 -->
		<property name="jobTime">
			<map>
				<entry>
					<key>
						<value>
							会见客户
						</value>
					</key>
					<value>124</value>
				</entry>
			</map>
		</property>
	</bean>
	
	<!-- 集合合并，父Bean -->
	<bean id="parentBoss" class="com.baobaotao.attr.Boss" abstract="true">
		<property name="favorites">
			<list>
				<value>看报</value>
				<value>赛车</value>
				<value>高尔夫</value>
			</list>
		</property>
	</bean>
	
	<!--  子Bean， parent指定父Bean，merge属性和父Bean中的同名属性合并-->
	<bean id="childBoss" class="com.baobaotao.attr.Boss" parent="parentBoss">
		<property name="favorites">
			<list merge="true">
				<value>爬山</value>
				<value>游泳</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置一个List类型的Bean，可以通过 list-class 显式指定List的实现类-->
	<util:list id="favoriteList1"  list-class="java.util.LinkedList" >
		<value>看报</value>
		<value>赛车</value>
		<value>高尔夫</value>
	</util:list>
	
	<!-- 配置一个Set类型的Bean，可以通过 set-class 显式指定Set的实现类-->
	<util:set id="favoriteSet1" >
		<value>看报</value>
		<value>赛车</value>
		<value>高尔夫</value>
	</util:set>
	
	<!-- 配置一个Map类型的Bean，可以通过 map-class 显式指定Map的实现类-->
	<util:map id="emails1" >
		<entry	key="AM" value="会见客户"/>
		<entry key="PM" value="公司内部会议"/>
	</util:map>
	
	<!-- 此外， <util:list> 和 <util:set> 还支持 value-type 属性，指定集合中的值类型，而<util-map>支持key-type和value-type属性，指定Map的键和值类型-->
	
	<!-- 没有使用p命名空间前 -->
	<bean id="boss4" class="com.baobaotao.attr.Boss">
		<property name="car" ref="car"></property>
	</bean>
	
	<!-- 使用p命名空间的配置 -->
	<bean id="car5" class="com.baobaotao.attr.Car"
		p:brand="红旗&amp;CA72"
		p:maxSpeed="200"
		p:price="20000.00"
	/>
	
	<bean id="boss5" class="com.baobaotao.attr.Boss" p:car-ref="car" />
		
	
		
	

	
	
	
</beans>
	