<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	>
	
	<!-- 通过指定context参数，让Spring使用AnnotationConfigWebApplicationContext而非XMLWebApplicationContext启动容器 -->
	<!--  
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
	</context-param>
	-->
	
	<!-- 指定标注了@Configuration的配置类，多个可以使用逗号或者空格分隔 -->
	<!--  
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>com.baobaotao.AppConfig1,com.baobaotao.AppConfig1</param-value>
	</context-param>
	-->
	
	<!-- ContextLoaderListener监听器将根据上面配置使用AnnotationConfigWebApplicationContext根据contextConfigLocation指定的配置类启动Spring容器 -->
	<!--
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	-->
	
	<!-- 在Web容器中配置容器监听器，观察Web应用程序中调度器的启动和关闭问题 
	<listener>
		<listener-class>com.baobaotao.web.StartCycleRunTask</listener-class>
	</listener>
	-->
	
	<!-- 在低版本的Web容器中(Servlet2.3之前)，用户可以使用HTTP请求过滤器进行配置Web应用环境相关的Bean作用域 -->
	<filter>
		<filter-name>requestContextFilter</filter-name>
		<filter-class>org.springframework.web.filter.RequestContextFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>requestContextFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- SpringSessionInViewFilter过滤器，解决延迟加载的问题 -->
	<!-- <filter>
		<filter-name>hibernateFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>hibernateFilter</filter-name>
		<url-pattern>*.html</url-pattern>
	</filter-mapping> -->
	
	
	
	<!-- 在高版本的Web容器中，则可以使用HTTP请求监听器进行配置 -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
	
	<!-- 从类路径下加载Spring配置文件，classpath关键字特指类路径下加载 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value> 
			classpath:applicationContext.xml
		</param-value>
	</context-param>
	
	<!-- 指定Log4J配置文件位置 
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>
	-->
	
	<!-- 定义LOG4J监听器 -->   
	<listener>   
	   <listener-class>   
			org.springframework.web.util.Log4jConfigListener   
	   </listener-class>   
	</listener> 
	
	<!-- 负责启动Spring容器的监听器，它将引用1处的上下文参数获得Spring配置文件地址 -->
	<listener>
		<listener-class>
			 org.springframework.web.context.ContextLoaderListener  
		</listener-class>
	</listener>
	
	<!-- 如果在不支持容器监听器的低版本Web容器中，我们可以采用ContextLoaderServlet完成相同的工作 -->
	<!--
	<servlet>
		<servlet-name>springContextLoaderServlet</servlet-name>
		<servlet-class>org.springframework.web.context.ContextLoaderServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	-->
	
	<!-- Spring MVC 的主控Servlet -->
	<servlet>
		<servlet-name>baobaotao</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<!-- Spring MVC 处理的URL -->
	<servlet-mapping>
		<servlet-name>baobaotao</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>
</web-app>
